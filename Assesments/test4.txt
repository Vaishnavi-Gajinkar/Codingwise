1.	SQL : Ranking Employees
Write an SQL query to find the top 3 highest-earning employees in each department from the `employees` table, which has columns: `id`, `name`, `salary`, and `department_id`.

SELECT	*, rnk FROM (
SELECT id, name, salary, department_id, DENSE_RANK() OVER(PARTITION BY department_id ORDER BY salary DESC) as rnk FROM employees) as sub
WHERE rnk IN (1,2,3)


2.	PANDAS : Data Merging
You have two Pandas DataFrames: `df_users` with columns `['user_id', 'name']` and `df_orders` with columns `['order_id', 'user_id', 'amount']`. Write a code snippet that merges these to show the name of the user for each order.

df.merge(df_users, df_orders, ON=’user_id’, HOW=left) 


3.	Statistics: Outlier Detection
Given the dataset `[10, 12, 12, 13, 15, 18, 20, 22, 29, 35]` , calculate the Interquartile Range (IQR). A data point is considered an outlier if it's below `Q1 - 1.5 * IQR` or above `Q3 + 1.5 * IQR`. Which of the following values would be considered an outlier?


Q2 = median = 50% == (15 + 18) / 2 = 16.5
Now, Q1 is the median of all values < Q2 == 10,12,12,13,15 == 12
Now, Q3 is the median of all values > Q2 == 18,20,22,29,35 == 22

IQR = Q3 – Q1 == 22 – 12 = 10
Min = Q1-1.5*IQR == 12-1.5*10 = -3
Max = Q3+1.5*IQR == 22+1.5*10 = 37
Outliers = none (since all values of dataset is between -3 & 37)

New Data = [2, 20, 22, 24, 25, 26, 28, 30, 35, 50]
Q2 = 25.5
Q1 = [2,20,22,24,25] = 22
Q3 = [26,28,30,35,50] = 30
IQR = 30-22 = 8
Min = 10
Max = 42
Outliers = [2,50]


4.	SQL: Spot the Error
SELECT department, MAX(salary) 
FROM employees 
WHERE MAX(salary) > 50000 
GROUP BY department

The column present in WHERE is an aggregated value which is not allowed. Hence it will fail.


5.	NumPy: Vectorization
Write a single line of NumPy code to calculate the Euclidean distance between two points, 
`p1 = np.array([1, 2, 3])` and `p2 = np.array([4, 5, 6])`
The formula is `sqrt(sum((p1-p2)^2))`




6.	SQL: Finding the Second Value
Write an SQL query to find the customer who placed the second most recent order. Assume an `orders` table with `customer_id` and `order_date` columns.

SELECT customer_id, MAX(order_date) AS 2ndlatestdate 
FROM orders 
WHERE order_date < (SELECT MAX(order_date) AS latestdate FROM orders) AS sub

7.	Pandas : Column creation
Write a single line of Pandas code to create a new column named `profit_margin` in a DataFrame `df`. The formula is `(df['profit'] / df['revenue']) * 100`.

df[‘profit_margin’] = (df['profit'] / df['revenue']) * 100

8.	Pandas : Handling Missing Data
Write a line of Pandas code to fill the missing `NaN` values in the 'age' column of a DataFrame `df` with the median age of that column.

df['age'].fillna(df['age'].median(), inplace=True)

9.	Pandas: Spot the Output
What will be the output of the following Pandas code?
import pandas as pd 
df = pd.DataFrame({'Category': ['A', 'B', 'A', 'B'], 'Value': [10, 20, 30, 40]}) 
result = df.groupby('Category').agg(total=('Value', 'sum'), count=('Value', 'count')) 
print(result)
        total 	count 
Category 
A 	    40 	    2 
B 	    60 	    2

