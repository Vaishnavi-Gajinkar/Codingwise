''' Fitness Data Analysis - Apple / FitBit watch '''

import numpy as np

raw_data = np.loadtxt(r'C:\Users\Lenovo\OneDrive\Documents\Datasets\fitness.txt', dtype='str')                  # datatype of all data is converted to string so that later it can be reconverted to any type as req.

print(raw_data)

print("\n", raw_data.shape)                                                                                     # to find count of rows&cols i.e. dimentions of data

print("\n",raw_data[0])                                                                                         # accessing 1st row of data
    
print("\n",raw_data.T)                                                                                          # collating data from each column into single single rows

print("\n",raw_data.T[0].shape)                                                                                 # to find count of non-zero elements in each column

date, step_count, mood, calories_burned, hours_of_sleep, activity_status, weight = raw_data.T                   # unpacked each row of transposed dataset in seperate variable

print("\n", date.dtype)                                                                                         # checking data type of this variable

# date = np.array(date, dtype='datetime64[D]')                                                                  # converting data from string to relevent dtypes
# date = raw_data.astype('datetime64[ns]')
step_count = np.array(step_count, dtype='int')
# mood = np.array(mood, dtype='int')
calories_burned = np.array(calories_burned, dtype='int')
hours_of_sleep = np.array(hours_of_sleep, dtype='int')
# activity_status = np.array(activity_status, dtype='int')
weight = np.array(weight, dtype='int')

print('\nDistinct stepcount are: ',np.unique(step_count))                                                       # listing unique values in each column
print('Distinct moods are: ',np.unique(mood))
print('Distinct calories_burned are: ',np.unique(calories_burned))
print('Distinct hours of sleep are: ',np.unique(hours_of_sleep))
print('Distinct activity statuses are: ',np.unique(activity_status))
print('Distinct weights are: ',np.unique(weight))

print('\nDT of mood col: ',mood.dtype)
mood[mood=='100'] = 'Sad'                                                                                       # changing category definitions of each mood type
mood[mood=='200'] = 'Neutral'
mood[mood=='300'] = 'Happy'
print(np.unique(mood))

print('\nDT of activity status col: ',activity_status.dtype)
activity_status[activity_status == '0'] = 'Inactive'
activity_status[activity_status == '500'] = 'Active'

print(np.unique(activity_status))

print("\nMax step count: ",step_count.max())
print("Index pos having max step count: ",step_count.argmax())
print("Date when this max steps were recorded: ", date[step_count.argmax()])

print("\nMin step count: ",step_count.min())
print("Index pos having min step count: ",step_count.argmin())
print("Date when this min steps were recorded: ", date[step_count.argmin()])

# calculate calorie difference when max & min step-counts were recorded

calori_diff = calories_burned[step_count.argmax()] - calories_burned[step_count.argmin()]
print(f"{calori_diff} calories was the difference between when maximum and minimum steps were recorded")

# what is user's most frequent mood
print("\nMost Frequent Mood was: ",np.unique(mood, return_counts=True))

# determine mood wrt steps

print("\nStep count when mood is Happy",np.mean(step_count[mood=="Happy"]))
print("Step count when mood is Neutral",np.mean(step_count[mood=="Neutral"]))
print("Step count when mood is Sad",np.mean(step_count[mood=="Sad"]))

# mood when steps are below a threshold value

print("\nMood when steps taken > 5000",np.unique(mood[step_count>5000],return_counts=True))
print("Mood when steps taken between 500 & 5000",np.unique(mood[(step_count>500) & (step_count<5000)],return_counts=True))
print("Mood when steps taken < 500",np.unique(mood[step_count<500],return_counts=True))

# mood based on hours of sleep

print("\nMood when user sleeps less than 6hrs: ",np.unique(mood[hours_of_sleep<6],return_counts=True))
print("Mood when user sleeps btwn 6-8 hrs: ",np.unique(mood[(hours_of_sleep>=6) | (hours_of_sleep<=8)],return_counts=True))
print("Mood when user sleeps more than 8hrs: ",np.unique(mood[hours_of_sleep>8],return_counts=True))

'''
OUTPUT : 
[['06-10-2017' '5464' '200' '181' '5' '0' '66']
 ['07-10-2017' '6041' '100' '197' '8' '0' '66']
 ['08-10-2017' '25' '100' '0' '5' '0' '66']
 ['09-10-2017' '5461' '100' '174' '4' '0' '66']
 ['10-10-2017' '6915' '200' '223' '5' '500' '66']
 ['11-10-2017' '4545' '100' '149' '6' '0' '66']
 ['12-10-2017' '4340' '100' '140' '6' '0' '66']
 ['13-10-2017' '1230' '100' '38' '7' '0' '66']
 ['14-10-2017' '61' '100' '1' '5' '0' '66']
 ['15-10-2017' '1258' '100' '40' '6' '0' '65']
 ['16-10-2017' '3148' '100' '101' '8' '0' '65']
 ['17-10-2017' '4687' '100' '152' '5' '0' '65']
 ['18-10-2017' '4732' '300' '150' '6' '500' '65']
 ['19-10-2017' '3519' '100' '113' '7' '0' '65']
 ['20-10-2017' '1580' '100' '49' '5' '0' '65']
 ['21-10-2017' '2822' '100' '86' '6' '0' '65']
 ['22-10-2017' '181' '100' '6' '8' '0' '65']
 ['23-10-2017' '3158' '200' '99' '5' '0' '65']
 ['24-10-2017' '4383' '200' '143' '4' '0' '64']
 ['25-10-2017' '3881' '200' '125' '5' '0' '64']
 ['26-10-2017' '4037' '200' '129' '6' '0' '64']
 ['27-10-2017' '202' '200' '6' '8' '0' '64']
 ['28-10-2017' '292' '200' '9' '5' '0' '64']
 ['29-10-2017' '330' '300' '10' '6' '0' '64']
 ['30-10-2017' '2209' '200' '72' '5' '0' '64']
 ['31-10-2017' '4550' '300' '150' '8' '500' '64']
 ['01-11-2017' '4435' '300' '141' '5' '0' '64']
 ['02-11-2017' '4779' '300' '156' '4' '0' '64']
 ['03-11-2017' '1831' '300' '57' '5' '0' '64']
 ['04-11-2017' '2255' '300' '72' '4' '0' '64']
 ['05-11-2017' '539' '300' '17' '5' '500' '64']
 ['06-11-2017' '5464' '300' '181' '4' '0' '64']
 ['07-11-2017' '6041' '200' '197' '3' '0' '64']
 ['08-11-2017' '4068' '300' '131' '2' '0' '64']
 ['09-11-2017' '4683' '300' '154' '9' '0' '64']
 ['10-11-2017' '4033' '300' '137' '5' '0' '64']
 ['11-11-2017' '6314' '300' '193' '6' '500' '64']
 ['12-11-2017' '614' '300' '19' '4' '500' '64']
 ['13-11-2017' '3149' '300' '101' '5' '500' '64']
 ['14-11-2017' '4005' '300' '139' '8' '500' '64']
 ['15-11-2017' '4880' '300' '164' '4' '500' '64']
 ['16-11-2017' '4136' '300' '137' '5' '500' '64']
 ['17-11-2017' '705' '300' '22' '6' '500' '64']
 ['18-11-2017' '570' '200' '17' '5' '500' '64']
 ['19-11-2017' '269' '300' '9' '6' '500' '64']
 ['20-11-2017' '4275' '300' '145' '5' '0' '64']
 ['21-11-2017' '5999' '300' '192' '6' '0' '64']
 ['22-11-2017' '4421' '300' '146' '5' '0' '64']
 ['23-11-2017' '6930' '300' '234' '6' '0' '64']
 ['24-11-2017' '5195' '300' '167' '5' '0' '64']
 ['25-11-2017' '546' '300' '16' '6' '0' '64']
 ['26-11-2017' '493' '300' '17' '7' '500' '64']
 ['27-11-2017' '995' '300' '32' '6' '500' '64']
 ['28-11-2017' '1163' '200' '35' '7' '500' '64']
 ['29-11-2017' '6676' '100' '220' '6' '500' '64']
 ['30-11-2017' '3608' '300' '116' '5' '500' '64']
 ['01-12-2017' '774' '300' '23' '6' '500' '64']
 ['02-12-2017' '1421' '300' '44' '7' '500' '64']
 ['03-12-2017' '4064' '300' '131' '8' '500' '64']
 ['04-12-2017' '2725' '300' '86' '8' '500' '64']
 ['05-12-2017' '5934' '300' '194' '7' '500' '64']
 ['06-12-2017' '1867' '300' '60' '8' '500' '64']
 ['07-12-2017' '3721' '100' '121' '5' '500' '64']
 ['08-12-2017' '2374' '200' '76' '4' '0' '64']
 ['09-12-2017' '2909' '200' '93' '3' '500' '64']
 ['10-12-2017' '1648' '100' '53' '3' '500' '64']
 ['11-12-2017' '799' '100' '25' '4' '0' '64']
 ['12-12-2017' '7102' '200' '227' '5' '500' '64']
 ['13-12-2017' '3941' '200' '125' '5' '500' '64']
 ['14-12-2017' '7422' '300' '243' '5' '500' '64']
 ['15-12-2017' '437' '200' '14' '3' '500' '64']
 ['16-12-2017' '1231' '200' '39' '4' '500' '64']
 ['17-12-2017' '1696' '100' '55' '4' '0' '64']
 ['18-12-2017' '4921' '200' '158' '5' '500' '64']
 ['19-12-2017' '221' '100' '7' '5' '500' '64']
 ['20-12-2017' '6500' '200' '213' '5' '500' '64']
 ['21-12-2017' '3575' '200' '116' '5' '500' '64']
 ['22-12-2017' '4061' '100' '129' '5' '0' '64']
 ['23-12-2017' '651' '100' '21' '5' '0' '64']
 ['24-12-2017' '753' '100' '28' '4' '0' '64']
 ['25-12-2017' '518' '100' '16' '3' '0' '64']
 ['26-12-2017' '5537' '300' '180' '4' '500' '64']
 ['27-12-2017' '4108' '200' '138' '5' '500' '64']
 ['28-12-2017' '5376' '300' '176' '5' '500' '64']
 ['29-12-2017' '3066' '200' '99' '4' '500' '64']
 ['30-12-2017' '177' '100' '5' '5' '0' '64']
 ['31-12-2017' '36' '100' '1' '3' '0' '64']
 ['01-01-2018' '299' '100' '10' '3' '0' '64']
 ['02-01-2018' '1447' '200' '47' '3' '0' '64']
 ['03-01-2018' '2599' '200' '84' '2' '0' '64']
 ['04-01-2018' '702' '100' '23' '3' '0' '64']
 ['05-01-2018' '133' '100' '4' '2' '0' '64']
 ['06-01-2018' '153' '300' '0' '8' '0' '64']
 ['07-01-2018' '500' '200' '0' '5' '500' '64']
 ['08-01-2018' '2127' '200' '0' '5' '0' '64']
 ['09-01-2018' '2203' '300' '0' '5' '500' '64']]

 (96, 7)

 ['06-10-2017' '5464' '200' '181' '5' '0' '66']

 [['06-10-2017' '07-10-2017' '08-10-2017' '09-10-2017' '10-10-2017'
  '11-10-2017' '12-10-2017' '13-10-2017' '14-10-2017' '15-10-2017'
  '16-10-2017' '17-10-2017' '18-10-2017' '19-10-2017' '20-10-2017'
  '21-10-2017' '22-10-2017' '23-10-2017' '24-10-2017' '25-10-2017'
  '26-10-2017' '27-10-2017' '28-10-2017' '29-10-2017' '30-10-2017'
  '31-10-2017' '01-11-2017' '02-11-2017' '03-11-2017' '04-11-2017'
  '05-11-2017' '06-11-2017' '07-11-2017' '08-11-2017' '09-11-2017'
  '10-11-2017' '11-11-2017' '12-11-2017' '13-11-2017' '14-11-2017'
  '15-11-2017' '16-11-2017' '17-11-2017' '18-11-2017' '19-11-2017'
  '20-11-2017' '21-11-2017' '22-11-2017' '23-11-2017' '24-11-2017'
  '25-11-2017' '26-11-2017' '27-11-2017' '28-11-2017' '29-11-2017'
  '30-11-2017' '01-12-2017' '02-12-2017' '03-12-2017' '04-12-2017'
  '05-12-2017' '06-12-2017' '07-12-2017' '08-12-2017' '09-12-2017'
  '10-12-2017' '11-12-2017' '12-12-2017' '13-12-2017' '14-12-2017'
  '15-12-2017' '16-12-2017' '17-12-2017' '18-12-2017' '19-12-2017'
  '20-12-2017' '21-12-2017' '22-12-2017' '23-12-2017' '24-12-2017'
  '25-12-2017' '26-12-2017' '27-12-2017' '28-12-2017' '29-12-2017'
  '30-12-2017' '31-12-2017' '01-01-2018' '02-01-2018' '03-01-2018'
  '04-01-2018' '05-01-2018' '06-01-2018' '07-01-2018' '08-01-2018'
  '09-01-2018']
 ['5464' '6041' '25' '5461' '6915' '4545' '4340' '1230' '61' '1258'
  '3148' '4687' '4732' '3519' '1580' '2822' '181' '3158' '4383' '3881'
  '4037' '202' '292' '330' '2209' '4550' '4435' '4779' '1831' '2255'
  '539' '5464' '6041' '4068' '4683' '4033' '6314' '614' '3149' '4005'
  '4880' '4136' '705' '570' '269' '4275' '5999' '4421' '6930' '5195'
  '546' '493' '995' '1163' '6676' '3608' '774' '1421' '4064' '2725'
  '5934' '1867' '3721' '2374' '2909' '1648' '799' '7102' '3941' '7422'
  '437' '1231' '1696' '4921' '221' '6500' '3575' '4061' '651' '753' '518'
  '5537' '4108' '5376' '3066' '177' '36' '299' '1447' '2599' '702' '133'
  '153' '500' '2127' '2203']
 ['200' '100' '100' '100' '200' '100' '100' '100' '100' '100' '100' '100'
  '300' '100' '100' '100' '100' '200' '200' '200' '200' '200' '200' '300'
  '200' '300' '300' '300' '300' '300' '300' '300' '200' '300' '300' '300'
  '300' '300' '300' '300' '300' '300' '300' '200' '300' '300' '300' '300'
  '300' '300' '300' '300' '300' '200' '100' '300' '300' '300' '300' '300'
  '300' '300' '100' '200' '200' '100' '100' '200' '200' '300' '200' '200'
  '100' '200' '100' '200' '200' '100' '100' '100' '100' '300' '200' '300'
  '200' '100' '100' '100' '200' '200' '100' '100' '300' '200' '200' '300']
 ['181' '197' '0' '174' '223' '149' '140' '38' '1' '40' '101' '152' '150'
  '113' '49' '86' '6' '99' '143' '125' '129' '6' '9' '10' '72' '150'
  '141' '156' '57' '72' '17' '181' '197' '131' '154' '137' '193' '19'
  '101' '139' '164' '137' '22' '17' '9' '145' '192' '146' '234' '167'
  '16' '17' '32' '35' '220' '116' '23' '44' '131' '86' '194' '60' '121'
  '76' '93' '53' '25' '227' '125' '243' '14' '39' '55' '158' '7' '213'
  '116' '129' '21' '28' '16' '180' '138' '176' '99' '5' '1' '10' '47'
  '84' '23' '4' '0' '0' '0' '0']
 ['5' '8' '5' '4' '5' '6' '6' '7' '5' '6' '8' '5' '6' '7' '5' '6' '8' '5'
  '4' '5' '6' '8' '5' '6' '5' '8' '5' '4' '5' '4' '5' '4' '3' '2' '9' '5'
  '6' '4' '5' '8' '4' '5' '6' '5' '6' '5' '6' '5' '6' '5' '6' '7' '6' '7'
  '6' '5' '6' '7' '8' '8' '7' '8' '5' '4' '3' '3' '4' '5' '5' '5' '3' '4'
  '4' '5' '5' '5' '5' '5' '5' '4' '3' '4' '5' '5' '4' '5' '3' '3' '3' '2'
  '3' '2' '8' '5' '5' '5']
 ['0' '0' '0' '0' '500' '0' '0' '0' '0' '0' '0' '0' '500' '0' '0' '0' '0'
  '0' '0' '0' '0' '0' '0' '0' '0' '500' '0' '0' '0' '0' '500' '0' '0' '0'
  '0' '0' '500' '500' '500' '500' '500' '500' '500' '500' '500' '0' '0'
  '0' '0' '0' '0' '500' '500' '500' '500' '500' '500' '500' '500' '500'
  '500' '500' '500' '0' '500' '500' '0' '500' '500' '500' '500' '500' '0'
  '500' '500' '500' '500' '0' '0' '0' '0' '500' '500' '500' '500' '0' '0'
  '0' '0' '0' '0' '0' '0' '500' '0' '500']
 ['66' '66' '66' '66' '66' '66' '66' '66' '66' '65' '65' '65' '65' '65'
  '65' '65' '65' '65' '64' '64' '64' '64' '64' '64' '64' '64' '64' '64'
  '64' '64' '64' '64' '64' '64' '64' '64' '64' '64' '64' '64' '64' '64'
  '64' '64' '64' '64' '64' '64' '64' '64' '64' '64' '64' '64' '64' '64'
  '64' '64' '64' '64' '64' '64' '64' '64' '64' '64' '64' '64' '64' '64'
  '64' '64' '64' '64' '64' '64' '64' '64' '64' '64' '64' '64' '64' '64'
  '64' '64' '64' '64' '64' '64' '64' '64' '64' '64' '64' '64']]

 (96,)

 <U10

Distinct stepcount are:  [  25   36   61  133  153  177  181  202  221  269  292  299  330  437  493  500  518  539  546  570  614  651  702  705  753  774  799  995 1163 1230 1231 1258 1421 1447 1580 1648 1696 1831 1867 2127 2203 2209
 2255 2374 2599 2725 2822 2909 3066 3148 3149 3158 3519 3575 3608 3721 3881 3941 4005 4033 4037 4061 4064 4068 4108 4136 4275 4340 4383 4421 4435 4545 4550 4683 4687 4732 4779 4880 4921 5195 5376 5461 5464 5537
 5934 5999 6041 6314 6500 6676 6915 6930 7102 7422]
Distinct moods are:  ['100' '200' '300']
Distinct calories_burned are:  [  0   1   4   5   6   7   9  10  14  16  17  19  21  22  23  25  28  32  35  38  39  40  44  47  49  53  55  57  60  72  76  84  86  93  99 101 113 116 121 125 129 131 137 138 139 140 141 143 145 146 149 150 152 154
 156 158 164 167 174 176 180 181 192 193 194 197 213 220 223 227 234 243]
Distinct hours of sleep are:  [2 3 4 5 6 7 8 9]
Distinct activity statuses are:  ['0' '500']
Distinct weights are:  [64 65 66]

DT of mood col:  <U10
['Happy' 'Neutral' 'Sad']

DT of activity status col:  <U10
['Active' 'Inactive']

Max step count:  7422
Index pos having max step count:  69
Date when this max steps were recorded:  14-12-2017

Min step count:  25
Index pos having min step count:  2
Date when this min steps were recorded:  08-10-2017
243 calories was the difference between when maximum and minimum steps were recorded

Most Frequent Mood was:  (array(['Happy', 'Neutral', 'Sad'], dtype='<U10'), array([40, 27, 29]))

Step count when mood is Happy 3392.725
Step count when mood is Neutral 3153.777777777778
Step count when mood is Sad 2103.0689655172414

Mood when steps taken > 5000 (array(['Happy', 'Neutral', 'Sad'], dtype='<U10'), array([9, 5, 3]))
Mood when steps taken between 500 & 5000 (array(['Happy', 'Neutral', 'Sad'], dtype='<U10'), array([27, 18, 18]))
Mood when steps taken < 500 (array(['Happy', 'Neutral', 'Sad'], dtype='<U10'), array([4, 3, 8]))

Mood when user sleeps less than 6hrs:  (array(['Happy', 'Neutral', 'Sad'], dtype='<U10'), array([20, 24, 19]))
Mood when user sleeps btwn 6-8 hrs:  (array(['Happy', 'Neutral', 'Sad'], dtype='<U10'), array([40, 27, 29]))
Mood when user sleeps more than 8hrs:  (array(['Happy'], dtype='<U10'), array([1]))

'''